#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define WIN 1
#define FUN 2
#define NUM 3
#define MOD 4

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

&lt {
    tapping-term-ms = <150>;
    quick-tap-ms = <250>;
};

/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        label = "macro_version";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <150>;
          quick_tap_ms = <0>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };

      bhm: balanced_homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          tapping-term-ms = <200>;    // <---[[moderate duration]]
          quick-tap-ms = <0>;
          flavor = "balanced";
          bindings = <&kp>, <&kp>;
      };

      mo_tog: behavior_mo_tog {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "hold-preferred";
          tapping-term-ms = <150>;
          bindings = <&mo>, <&tog>;
        };
    };

  conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <FUN NUM>;
            then-layer = <MOD>;
        };
    };

  combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp ESC>;
        };
        combo_bt_clr {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <MOD>;
            bindings = <&bt BT_CLR>;
        };
    };

  macros {
        shfttab: shfttab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LSHFT>
                ;
        };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &none      &none        &none       &none       &none        &none       &none                                                                 &none    &none       &none        &none       &none       &none           &none
        &none      &kp Q        &kp W       &kp E       &kp R        &kp T       &none                                                                 &none    &kp Y       &kp U        &kp I       &kp O       &kp P           &none
        &none      &bhm LCTRL A &bhm LALT S &bhm LGUI D &bhm LSHFT F &bhm CAPS G &none               &none        &none    &none  &none                &none    &bhm CAPS H &bhm RSHFT J &bhm RGUI K &bhm RALT L &bhm RCTRL SEMI &none
        &none      &kp Z        &kp X       &kp C       &kp V        &kp B                                        &none    &none                                &kp N       &kp M        &kp MINUS   &kp LBKT    &kp SQT         &none
        &none      &none        &none       &none       &none                          &lt FUN BSPC  &lt NUM TAB  &none    &none  &lt NUM ENTER  &lt FUN SPACE              &none        &none       &none       &none           &none
      >;
    };
    win {
      bindings = <
        &trans    &trans      &trans      &trans       &trans    &trans    &trans                                              &trans    &trans    &trans    &trans       &trans        &trans         &trans
        &trans    &trans      &trans      &trans       &trans    &trans    &trans                                              &trans    &trans    &trans    &trans       &trans        &trans         &trans
        &trans    &bhm LGUI A &trans      &bhm LCTRL D &trans    &trans    &trans        &trans &trans    &trans &trans        &trans    &trans    &trans    &bhm RCTRL K &bhm LALT L   &bhm RGUI SEMI &trans
        &trans    &trans      &bhm RALT X &trans       &trans    &trans                         &trans    &trans                         &trans    &trans    &trans       &bhm RALT DOT &trans         &trans
        &trans    &trans      &trans      &trans       &trans                     &trans &trans &trans    &trans &trans &trans                     &trans    &trans       &trans        &trans         &trans
      >;
    };
    fun {
      bindings = <
        &trans    &trans        &trans       &trans       &trans        &trans        &trans                                              &trans    &trans    &trans          &trans         &trans       &trans           &trans
        &trans    &kp F1        &kp F2       &kp F3       &kp F4        &kp F5        &trans                                              &trans    &trans    &kp HOME        &kp PG_DN      &kp PG_UP    &kp END          &trans
        &trans    &bhm LCTRL F6 &bhm LALT F7 &bhm LGUI F8 &bhm LSHFT F9 &bhm CAPS F10 &trans        &trans &trans    &trans &trans        &trans    &kp CAPS  &bhm RSHFT LEFT &bhm RGUI DOWN &bhm RALT UP &bhm RCTRL RIGHT &trans
        &trans    &kp F11       &kp F12      &trans       &trans        &trans                             &trans    &trans                         &trans    &kp DEL         &kp INS        &trans       &trans           &trans
        &trans    &trans        &trans       &trans       &trans                             &trans &trans &trans    &trans &trans &trans                     &trans          &trans         &trans       &trans           &trans
      >;
    };
    num {
      bindings = <
        &trans    &trans        &trans       &trans       &trans        &trans       &trans                                              &trans    &trans     &trans           &trans          &trans          &trans              &trans
        &trans    &kp N1        &kp N2       &kp N3       &kp N4        &kp N5       &trans                                              &trans    &trans     &kp GRAVE        &kp EQUAL       &kp RBKT        &kp BSLH            &trans
        &trans    &bhm LCTRL N6 &bhm LALT N7 &bhm LGUI N8 &bhm LSHFT N9 &bhm CAPS N0 &trans        &trans &trans    &trans &trans        &trans    &kp CAPS   &bhm RSHFT NUBS  &bhm RGUI COMMA &bhm RALT DOT   &bhm RCTRL FSLH     &trans
        &trans    &trans        &trans       &trans       &trans        &trans                            &trans    &trans                         &trans     &trans           &trans          &trans          &trans              &trans
        &trans    &trans        &trans       &trans       &trans                            &trans &trans &trans    &trans &trans &trans                      &trans           &trans          &trans          &trans              &trans
      >;
    };
    mod {
      bindings = <
        &bootloader &none           &none        &none        &none           &none        &none                                              &none       &none                  &none           &none        &none        &none        &bootloader
        &none       &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3    &bt BT_SEL 4 &none                                              &none       &rgb_ug RGB_MEFS_CMD 5 &rgb_ug RGB_TOG &bl BL_TOG   &bl BL_INC   &bl BL_DEC   &none
        &none       &kp LCTRL       &kp LALT     &kp LGUI     &kp LSHFT       &kp CAPS     &none         &none  &none    &none  &none         &none       &kp C_MUTE             &kp C_VOL_DN    &kp C_BRI_DN &kp C_BRI_UP &kp C_VOL_UP &none
        &none       &kp SLCK        &kp KP_NLCK  &kp PSCRN    &kp PAUSE_BREAK &tog WIN                          &none    &none                            &kp C_PP               &kp C_PREV      &kp C_NEXT   &none        &none        &none
        &none       &none           &none        &none        &none                               &none  &none  &none    &none  &none  &none                                     &none           &none        &none        &none        &none
      >;
    };
  };
};
